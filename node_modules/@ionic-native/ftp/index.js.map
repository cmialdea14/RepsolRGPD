{"version":3,"sources":["../../../src/@ionic-native/plugins/ftp/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,MAAA,CAAO;AAElC;;;;;;;;;;;;;;;;;;;;GAoBG;AASH;IAAyB,uBAAiB;IAA1C;;IA8HA,CAAC;IA7HC;;;;;;;;OAQG;IAEH,qBAAO,GAAP,UAAQ,QAAgB,EAAE,QAAgB,EAAE,QAAgB;QAC1D,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;OAaG;IAEH,gBAAE,GAAF,UAAG,IAAY;QACb,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,mBAAK,GAAL,UAAM,IAAY;QAChB,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;OAOG;IAEH,mBAAK,GAAL,UAAM,IAAY;QAChB,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,gBAAE,GAAF,UAAG,IAAY;QACb,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAIH,oBAAM,GAAN,UAAO,SAAiB,EAAE,UAAkB;QAC1C,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAIH,sBAAQ,GAAR,UAAS,SAAiB,EAAE,UAAkB;QAC5C,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,oBAAM,GAAN;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,wBAAU,GAAV;QACE,MAAM,CAAC;IACT,CAAC;IACI,cAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAlHA;QADC,OAAO,EAAE;;;;sCAGT;IAiBD;QADC,OAAO,EAAE;;;;iCAGT;IASD;QADC,OAAO,EAAE;;;;oCAGT;IAWD;QADC,OAAO,EAAE;;;;oCAGT;IASD;QADC,OAAO,EAAE;;;;iCAGT;IAcD;QAHC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCAC6C,UAAU;qCAExD;IAcD;QAHC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCAC+C,UAAU;uCAE1D;IAQD;QADC,OAAO,EAAE;;;;qCAGT;IAQD;QADC,OAAO,EAAE;;;;yCAGT;IAvHU,GAAG;QARf,MAAM,CAAC;YACN,UAAU,EAAE,KAAK;YACjB,MAAM,EAAE,oBAAoB;YAC5B,SAAS,EAAE,oBAAoB;YAC/B,IAAI,EAAE,8CAA8C;YACpD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,GAAG,CA8Hf;IAAD,UAAC;CA9HD,AA8HC,CA9HwB,iBAAiB,GA8HzC;SA9HY,GAAG","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n\n/**\n * @name FTP\n * @description\n * This cordova plugin is created to use ftp (client) in web/js.\n *\n * @usage\n * ```typescript\n * import { FTP } from '@ionic-native/ftp';\n *\n *\n * constructor(private fTP: FTP) { }\n *\n * ...\n *\n *\n * this.fTP.connect('ftp_host', 'ftp_user', 'ftp_password')\n *   .then((res: any) => console.log('Login successful', res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'FTP',\n  plugin: 'cordova-plugin-ftp',\n  pluginRef: 'cordova.plugin.ftp',\n  repo: 'https://github.com/xfally/cordova-plugin-ftp',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FTP extends IonicNativePlugin {\n  /**\n   * Connect to one ftp server.\n   *\n   * Just need to init the connection once. If success, you can do any ftp actions later.\n   * @param {string} hostname The ftp server url. Like ip without protocol prefix, e.g. \"192.168.1.1\".\n   * @param {string} username The ftp login username. If it and `password` are all blank/undefined, the default username \"anonymous\" is used.\n   * @param {string} password The ftp login password. If it and `username` are all blank/undefined, the default password \"anonymous@\" is used.\n   * @return {Promise<any>} The success callback. Notice: For iOS, if triggered, means `init` success, but NOT means the later action, e.g. `ls`... `download` will success!\n   */\n  @Cordova()\n  connect(hostname: string, username: string, password: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * List files (with info of `name`, `type`, `link`, `size`, `modifiedDate`) under one directory on the ftp server.\n   * You can get one file's name using `fileList[x].name` (`x` is the location in array).\n   *\n   * Explain key:\n   * - name: file name (utf-8).\n   * - type: file type. number `0` means regular file, `1` means directory, `2` means symbolic link, `-1` means unknown type (maybe block dev, char dev...).\n   * - link: if the file is a symbolic link, then this field store symbolic link information (utf-8), else it's a blank string.\n   * - size: file size in bytes.\n   * - modifiedDate: modified date of this file. date format is `yyyy-MM-dd HH:mm:ss zzz`, e.g \"2015-12-01 20:45:00 GMT+8\".\n   *\n   * @param {string} path The path on the ftp server. e.g. \"/adf/123/\".\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  ls(path: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Create one directory on the ftp server.\n   *\n   * @param {string} path The path on the ftp server. e.g. \"/adf/123/\".\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  mkdir(path: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete one directory on the ftp server.\n   *\n   * Tip: As many ftp server could not rm dir when it's not empty, so rm all files under the dir at first is recommended.\n   *\n   * @param {string} path The file (with full path) you want to delete. e.g. \"/adf/123/newDir/myFile\".\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  rmdir(path: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete one file on the ftp server.\n   *\n   * @param {string} file The file (with full path) you want to delete. e.g. \"/adf/123/newDir/myFile\".\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  rm(file: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Upload one local file to the ftp server.\n   *\n   * @param {string} localFile The file (with full path) you want to upload. e.g. \"/local/path/to/localFile\".\n   * @param {string} remoteFile The file (with full path) you want to located on the ftp server. e.g. \"/adf/123/newDir/remoteFile\".\n   * @return {Observable<any>} Returns an observable.\n   *                        It will be triggered many times according the file's size.\n   *                        The arg `0`, `0.1xx`, `0.2xx` ... `1` means the upload percent. When it reach `1`, means success.\n   */\n  @Cordova({\n    observable: true\n  })\n  upload(localFile: string, remoteFile: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Download one remote file on the ftp server to local path.\n   *\n   * @param {string} localFile The file (with full path) you want to upload. e.g. \"/local/path/to/localFile\".\n   * @param {string} remoteFile The file (with full path) you want to located on the ftp server. e.g. \"/adf/123/newDir/remoteFile\".\n   * @return {Observable<any>} Returns an observable.\n   *                        It will be triggered many times according the file's size.\n   *                        The arg `0`, `0.1xx`, `0.2xx` ... `1` means the upload percent. When it reach `1`, means success.\n   */\n  @Cordova({\n    observable: true\n  })\n  download(localFile: string, remoteFile: string): Observable<any> {\n    return;\n  }\n\n  /**\n   * Cancel all requests. Always success.\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  cancel(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Disconnect from ftp server.\n   *\n   * @return {Promise<any>} Returns a promise\n   */\n  @Cordova()\n  disconnect(): Promise<any> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}